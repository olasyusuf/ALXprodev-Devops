#!/bin/bash
# This script fetches data for a list of Pokémon from the API and saves each
# response to a separate JSON file. It includes a delay to prevent rate-limiting.

# Define the list of Pokémon to fetch.
pokemon_list=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Define the base URL for the Pokémon API.
BASE_API_URL="https://pokeapi.co/api/v2/pokemon/"

# Create directory to store JSON files
OUTPUT_DIR="pokemon_data"
mkdir -p "$OUTPUT_DIR"

# Set error files
ERROR_FILE="errors.txt"

# log errors
ERROR_LOG="errors.log"

# Define the delay between requests in seconds.
DELAY_SECONDS=2

# Loop through each Pokémon in the list.
for pokemon_name in "${pokemon_list[@]}"; do
  # Construct the full API URL and output filename for the current Pokémon.
  API_URL="${BASE_API_URL}${pokemon_name}"
  OUTPUT_FILE="$OUTPUT_DIR/${pokemon_name}.json"
  count=1
  limits=3
  success=false
  
  echo "Fetching data for $pokemon_name..."

  while [ $count -le $limits ]; do
    # Make the API request using curl and save the output to a file.
    # The --silent flag prevents curl from showing a progress meter.
    # The --show-error flag ensures curl prints a message on stderr if it fails.
    curl --silent --show-error "$API_URL" -o "$OUTPUT_FILE"
    
    # Check the exit status of the last command (curl).
    if [ $? -eq 0 ]; then
        echo "Success! Data for $pokemon_name saved to $OUTPUT_FILE."
        success=true
        break
    else
        # If curl failed, log the error message to errors.txt.
        echo "Attempt $count failed for $pokemon_name. Retrying..."
        sleep 1
        ((count++))
    fi

    # Add a delay between requests to respect API rate limits.
    echo "Waiting $DELAY_SECONDS second(s) before next request..."
    sleep $DELAY_SECONDS
  done

  # Log error if all 3 attempts fail
  if [ "$success" = false ]; then
    echo "Failed to fetch data for $pokemon_name after ${limits} attempts." >> "$ERROR_LOG"
  fi

  # Delay to avoid rate-limiting
  sleep 1
done

echo "Script finished."